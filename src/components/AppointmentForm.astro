---
interface Props {
  type?: 'appointment' | 'quote';
  title?: string;
}

const { type = 'appointment', title = 'Plan een afspraak' } = Astro.props;

const timeSlots = [
  { value: "ochtend", label: "Ochtend (09:00 - 12:00)" },
  { value: "middag", label: "Middag (12:00 - 17:00)" }
];

const projectTypes = [
  { value: "nieuwbouw", label: "Nieuwbouw" },
  { value: "renovatie", label: "Renovatie" },
  { value: "restauratie", label: "Restauratie" },
  { value: "verduurzaming", label: "Verduurzaming" }
];
---

<div id={`${type}Modal`} class="fixed inset-0 bg-black/30 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
  <div class="w-full max-w-lg bg-white/90 backdrop-blur-md rounded-lg shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] border border-white/20">
    <div class="p-6 bg-gradient-to-br from-white/60 to-white/40">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-2xl font-bold text-gray-900">
          {title}
        </h3>
        <button type="button" class="closeModal text-gray-400 hover:text-gray-500">
          <span class="sr-only">Sluiten</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <form 
        id={`${type}Form`} 
        class="space-y-4"
      >
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label for={`${type}-name`} class="block text-sm font-medium text-gray-700">
              Naam
            </label>
            <input
              type="text"
              name="name"
              id={`${type}-name`}
              required
              class="mt-1 block w-full rounded-lg border border-gray-300/50 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 backdrop-blur-sm bg-white/70 transition-all duration-200"
              placeholder="Uw naam"
            />
          </div>

          <div>
            <label for={`${type}-email`} class="block text-sm font-medium text-gray-700">
              E-mailadres
            </label>
            <input
              type="email"
              name="email"
              id={`${type}-email`}
              required
              class="mt-1 block w-full rounded-lg border border-gray-300/50 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 backdrop-blur-sm bg-white/70 transition-all duration-200"
              placeholder="Uw e-mailadres"
            />
          </div>
        </div>

        <div>
          <label for={`${type}-phone`} class="block text-sm font-medium text-gray-700">
            Telefoonnummer
          </label>
          <input
            type="tel"
            name="phone"
            id={`${type}-phone`}
            required
            class="mt-1 block w-full rounded-lg border border-gray-300/50 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 backdrop-blur-sm bg-white/70 transition-all duration-200"
            placeholder="Uw telefoonnummer"
          />
        </div>

        <div>
          <label for={`${type}-projectType`} class="block text-sm font-medium text-gray-700">
            Type project
          </label>
          <select
            id={`${type}-projectType`}
            name="projectType"
            required
            class="mt-1 block w-full rounded-lg border border-gray-300/50 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 backdrop-blur-sm bg-white/70 transition-all duration-200"
          >
            <option value="">Selecteer type project</option>
            {projectTypes.map(type => (
              <option value={type.value}>{type.label}</option>
            ))}
          </select>
        </div>

        {type === 'appointment' && (
          <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
            <div>
              <label for={`${type}-preferredDate`} class="block text-sm font-medium text-gray-700">
                Voorkeursdatum
              </label>
              <input
                type="date"
                name="preferredDate"
                id={`${type}-preferredDate`}
                required
                min={new Date().toISOString().split('T')[0]}
                class="mt-1 block w-full rounded-lg border border-gray-300/50 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 backdrop-blur-sm bg-white/70 transition-all duration-200"
              />
            </div>

            <div>
              <label for={`${type}-preferredTime`} class="block text-sm font-medium text-gray-700">
                Voorkeurstijd
              </label>
              <select
                id={`${type}-preferredTime`}
                name="preferredTime"
                required
                class="mt-1 block w-full rounded-lg border border-gray-300/50 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 backdrop-blur-sm bg-white/70 transition-all duration-200"
              >
                <option value="">Selecteer voorkeurstijd</option>
                {timeSlots.map(slot => (
                  <option value={slot.value}>{slot.label}</option>
                ))}
              </select>
            </div>
          </div>
        )}

        <div>
          <label for={`${type}-message`} class="block text-sm font-medium text-gray-700">
            {type === 'quote' ? 'Projectomschrijving' : 'Toelichting'}
          </label>
          <textarea
            id={`${type}-message`}
            name="message"
            rows="3"
            class="mt-1 block w-full rounded-lg border border-gray-300/50 focus:border-primary-500 focus:ring-2 focus:ring-primary-500/20 backdrop-blur-sm bg-white/70 transition-all duration-200"
            placeholder={type === 'quote' ? 'Beschrijf uw project en wensen...' : 'Eventuele toelichting...'}
          ></textarea>
        </div>

        <div class="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            class="closeModal inline-flex justify-center rounded-lg border border-gray-300/50 bg-white/70 backdrop-blur-sm px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-all duration-200"
            onclick="document.getElementById(`${type}Modal`).classList.add('hidden'); document.getElementById(`${type}Modal`).classList.remove('flex'); document.body.style.overflow = '';"
          >
            Annuleren
          </button>
          <button
            type="submit"
            class="inline-flex justify-center rounded-lg border border-transparent bg-primary-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-all duration-200"
          >
            {type === 'quote' ? 'Offerte aanvragen' : 'Verstuur aanvraag'}
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script define:vars={{ type }}>
  import { EMAILJS_CONFIG, initEmailJS, sendEmail } from '../lib/emailjs';

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById(`${type}Form`);
    const modal = document.getElementById(`${type}Modal`);

    if (!form || !modal) return;

    // Initialize EmailJS
    initEmailJS();

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) submitButton.disabled = true;
      
      try {
        const formData = new FormData(form);
        const templateParams = {
          from_name: formData.get('name'),
          from_email: formData.get('email'),
          phone: formData.get('phone'),
          project_type: formData.get('projectType'),
          message: formData.get('message'),
          ...(type === 'appointment' && {
            preferred_date: formData.get('preferredDate'),
            preferred_time: formData.get('preferredTime'),
          })
        };

        await sendEmail(
          type === 'quote' ? EMAILJS_CONFIG.QUOTE_TEMPLATE_ID : EMAILJS_CONFIG.CONTACT_TEMPLATE_ID,
          templateParams
        );

        form.reset();
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = '';
        
        const event = new CustomEvent('show-notification', {
          detail: {
            type: 'success',
            message: type === 'quote' 
              ? 'Bedankt voor uw offerte aanvraag! We nemen binnen 24 uur contact met u op.'
              : 'Bedankt voor uw afspraak aanvraag! We nemen zo spoedig mogelijk contact met u op.'
          }
        });
        window.dispatchEvent(event);
      } catch (error) {
        console.error('Error:', error);
        const event = new CustomEvent('show-notification', {
          detail: {
            type: 'error',
            message: 'Er is iets misgegaan. Probeer het opnieuw of neem telefonisch contact op.'
          }
        });
        window.dispatchEvent(event);
      } finally {
        if (submitButton) submitButton.disabled = false;
      }
    });

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = '';
      }
    });
  });
</script>

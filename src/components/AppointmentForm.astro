---
const timeSlots = [
  { value: "ochtend", label: "Ochtend (09:00 - 12:00)" },
  { value: "middag", label: "Middag (12:00 - 17:00)" }
];

const projectTypes = [
  { value: "nieuwbouw", label: "Nieuwbouw" },
  { value: "renovatie", label: "Renovatie" },
  { value: "restauratie", label: "Restauratie" },
  { value: "verduurzaming", label: "Verduurzaming" }
];
---

<div id="appointmentModal" class="fixed inset-0 bg-black/30 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
  <div class="w-full max-w-lg bg-white/90 backdrop-blur-md rounded-lg shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] border border-white/20">
    <div class="p-6 bg-gradient-to-br from-white/60 to-white/40">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-2xl font-bold text-gray-900">
          Plan een afspraak
        </h3>
        <button type="button" class="closeModal text-gray-400 hover:text-gray-500">
          <span class="sr-only">Sluiten</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <form id="appointmentForm" class="space-y-4">
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700">
              Naam
            </label>
            <input
              type="text"
              name="name"
              id="name"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-accent-500 focus:ring-accent-500 sm:text-sm"
            />
          </div>

          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">
              E-mailadres
            </label>
            <input
              type="email"
              name="email"
              id="email"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-accent-500 focus:ring-accent-500 sm:text-sm"
            />
          </div>
        </div>

        <div>
          <label for="phone" class="block text-sm font-medium text-gray-700">
            Telefoonnummer
          </label>
          <input
            type="tel"
            name="phone"
            id="phone"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-accent-500 focus:ring-accent-500 sm:text-sm"
          />
        </div>

        <div>
          <label for="projectType" class="block text-sm font-medium text-gray-700">
            Type project
          </label>
          <select
            id="projectType"
            name="projectType"
            required
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-accent-500 focus:ring-accent-500 sm:text-sm"
          >
            <option value="">Selecteer type project</option>
            {projectTypes.map(type => (
              <option value={type.value}>{type.label}</option>
            ))}
          </select>
        </div>

        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label for="preferredDate" class="block text-sm font-medium text-gray-700">
              Voorkeursdatum
            </label>
            <input
              type="date"
              name="preferredDate"
              id="preferredDate"
              required
              min={new Date().toISOString().split('T')[0]}
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-accent-500 focus:ring-accent-500 sm:text-sm"
            />
          </div>

          <div>
            <label for="preferredTime" class="block text-sm font-medium text-gray-700">
              Voorkeurstijd
            </label>
            <select
              id="preferredTime"
              name="preferredTime"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-accent-500 focus:ring-accent-500 sm:text-sm"
            >
              <option value="">Selecteer voorkeurstijd</option>
              {timeSlots.map(slot => (
                <option value={slot.value}>{slot.label}</option>
              ))}
            </select>
          </div>
        </div>

        <div>
          <label for="message" class="block text-sm font-medium text-gray-700">
            Toelichting
          </label>
          <textarea
            id="message"
            name="message"
            rows="3"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-accent-500 focus:ring-accent-500 sm:text-sm"
          ></textarea>
        </div>

        <div class="flex justify-end space-x-3 pt-4">
          <button
            type="button"
            class="closeModal inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
          >
            Annuleren
          </button>
          <button
            type="submit"
            class="inline-flex justify-center rounded-md border border-transparent bg-accent-500 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-accent-600 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2"
          >
            Verstuur aanvraag
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('appointmentModal');
    const closeButtons = document.querySelectorAll('.closeModal');
    const form = document.getElementById('appointmentForm') as HTMLFormElement;

    if (!modal || !form) {
      console.error('Required elements not found');
      return;
    }

    // Open modal when clicking any "Plan afspraak" button
    document.querySelectorAll('[href="#contact"]').forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        if (modal) modal.classList.remove('hidden');
      });
    });

    // Close modal when clicking close button
    closeButtons.forEach(button => {
      button.addEventListener('click', () => {
        if (modal) modal.classList.add('hidden');
      });
    });

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });

    // Handle form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      
      try {
        const response = await fetch('/api/create-appointment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();
        
        if (result.success) {
          alert('Bedankt voor uw aanvraag! U ontvangt binnen enkele minuten een email met de afspraakbevestiging en een agenda-item.');
        } else {
          throw new Error(result.message);
        }
        
        // Close modal and reset form
        if (modal) modal.classList.add('hidden');
        form.reset();
      } catch (error) {
        console.error('Error:', error);
        alert('Er is iets misgegaan. Probeer het later opnieuw of neem telefonisch contact met ons op.');
      }
    });
  });
</script>

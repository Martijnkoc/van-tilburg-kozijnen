---
interface Props {
  beforeImage: string;
  afterImage: string;
  beforeLabel?: string;
  afterLabel?: string;
}

const {
  beforeImage,
  afterImage,
  beforeLabel = "Voor",
  afterLabel = "Na"
} = Astro.props;
---

<div class="before-after-slider relative w-full aspect-[4/3] overflow-hidden rounded-lg">
  <!-- After Image (Full) -->
  <div class="absolute inset-0">
    <img
      src={afterImage}
      alt="Na"
      class="w-full h-full object-cover"
    />
    <span class="absolute top-4 right-4 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full text-sm font-medium text-text shadow-lg">
      {afterLabel}
    </span>
  </div>

  <!-- Before Image (Clip) -->
  <div class="before-image absolute inset-0" style="width: 0;">
    <img
      src={beforeImage}
      alt="Voor"
      class="w-full h-full object-cover"
    />
    <span class="absolute top-4 left-4 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full text-sm font-medium text-text shadow-lg">
      {beforeLabel}
    </span>
  </div>

  <!-- Slider Handle -->
  <div class="slider-handle absolute top-0 bottom-0 w-1 bg-white cursor-ew-resize select-none touch-none" style="left: 0;">
    <div class="absolute top-1/2 -translate-y-1/2 -translate-x-1/2 w-10 h-10 bg-white rounded-full shadow-lg flex items-center justify-center">
      <svg class="w-6 h-6 text-text" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h8M8 12h8m-8 5h8" />
      </svg>
    </div>
  </div>
</div>

<script>
  function initSlider() {
    const slider = document.querySelector('.slider-handle');
    const beforeImage = document.querySelector('.before-image');
    if (!slider || !beforeImage) return;

    let isDragging = false;

    function updateSliderPosition(clientX: number) {
      const bounds = slider.parentElement?.getBoundingClientRect();
      if (!bounds) return;

      const position = Math.min(Math.max(0, clientX - bounds.left), bounds.width);
      const percentage = (position / bounds.width) * 100;

      slider.style.left = `${percentage}%`;
      beforeImage.style.width = `${percentage}%`;
    }

    slider.addEventListener('mousedown', () => {
      isDragging = true;
    });

    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      updateSliderPosition(e.clientX);
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
    });

    // Touch events
    slider.addEventListener('touchstart', (e) => {
      isDragging = true;
      e.preventDefault();
    });

    document.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      updateSliderPosition(e.touches[0].clientX);
    });

    document.addEventListener('touchend', () => {
      isDragging = false;
    });
  }

  // Initialize all sliders when the DOM is ready
  document.addEventListener('DOMContentLoaded', initSlider);
</script>

<style>
  .before-after-slider {
    touch-action: none;
  }

  .before-after-slider img {
    pointer-events: none;
  }

  .slider-handle {
    transition: transform 0.1s ease;
  }

  .slider-handle:hover {
    transform: scale(1.1);
  }
</style>

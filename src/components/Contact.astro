---
interface ContactInfo {
  icon: string;
  title: string;
  details: string[];
  description: string;
  type: string;
  cta?: {
    link: string;
    text: string;
  };
}

const contactInfo: ContactInfo[] = [
  {
    icon: "location",
    title: "Bezoekadres",
    details: ["Putsmolentje 7", "4641 SK Ossendrecht"],
    description: "Ons bezoekadres",
    type: 'address',
    cta: {
      link: "https://www.google.com/maps/place/Putsmolentje+7,+4641+SK+Ossendrecht",
      text: "Route plannen"
    }
  },
  {
    icon: "phone",
    title: "Telefoon",
    details: [
      "0164 672 085",
      "Maandag t/m vrijdag",
      "07:30 - 12:20, 13:00 - 17:00",
      "Weekend gesloten"
    ],
    description: "Ons telefoonnummer",
    type: 'phone',
    cta: {
      link: "tel:0164672085",
      text: "Bel direct"
    }
  },
  {
    icon: "mail",
    title: "E-mail",
    details: ["hallo@vantilburg-kozijnen.nl"],
    description: "Ons e-mailadres",
    type: 'email',
    cta: {
      link: "mailto:hallo@vantilburg-kozijnen.nl",
      text: "Stuur een e-mail"
    }
  }
];

const projectTypes = [
  { value: "nieuwbouw", label: "Nieuwbouw" },
  { value: "renovatie", label: "Renovatie" },
  { value: "restauratie", label: "Restauratie" },
  { value: "verduurzaming", label: "Verduurzaming" }
];

const timeSlots = [
  { value: "ochtend", label: "Ochtend (09:00 - 12:00)" },
  { value: "middag", label: "Middag (12:00 - 17:00)" }
];
---

<section class="py-12 bg-white" id="contact">
  <div class="container mx-auto px-4">
    <div class="text-center mb-8">
      <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4">
        Neem Contact Op
      </h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Heeft u vragen of wilt u een vrijblijvende offerte? Neem gerust contact met ons op.
        Wij helpen u graag verder.
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-5xl mx-auto">
      {contactInfo.map(info => (
        <div class="bg-white rounded-xl p-6 shadow-sm hover:shadow-md transition-all duration-300 border border-gray-100">
          <div class="flex flex-col items-center text-center h-full">
            <div class="w-12 h-12 mb-4 rounded-full bg-primary-50 flex items-center justify-center">
              <svg class="w-6 h-6 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={info.icon}></path>
              </svg>
            </div>
            
            <h3 class="text-xl font-bold text-gray-900 mb-2">{info.title}</h3>
            <p class="text-gray-600 mb-4">{info.description}</p>
            
            <div class="mt-auto space-y-2">
              {info.details.map(detail => (
                <div class="flex items-center justify-center space-x-2">
                  {info.type === 'address' ? (
                    <a 
                      href={`https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(detail)}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-primary-500 hover:text-primary-600 transition-colors"
                    >
                      {detail}
                    </a>
                  ) : info.type === 'phone' ? (
                    <a 
                      href={`tel:${detail.replace(/[^0-9+]/g, '')}`}
                      class="text-primary-500 hover:text-primary-600 transition-colors"
                    >
                      {detail}
                    </a>
                  ) : info.type === 'email' ? (
                    <a 
                      href={`mailto:${detail}`}
                      class="text-primary-500 hover:text-primary-600 transition-colors"
                    >
                      {detail}
                    </a>
                  ) : (
                    <span class="text-gray-600">{detail}</span>
                  )}
                </div>
              ))}
            </div>

            {info.cta && (
              <a
                href={info.cta.link}
                class="inline-flex items-center mt-4 px-4 py-2 rounded-lg bg-primary-500 text-white hover:bg-primary-600 transition-colors"
              >
                <span>{info.cta.text}</span>
                <svg class="w-4 h-4 ml-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
              </a>
            )}
          </div>
        </div>
      ))}
    </div>

    <div class="mt-12 text-center">
      <div class="inline-flex items-center space-x-2 text-sm text-gray-500">
        <svg class="w-5 h-5 text-primary-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <span>Wij reageren binnen 24 uur op uw bericht</span>
      </div>
    </div>
  </div>

  <!-- Contact Schema.org markup -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "Van Tilburg Kozijnen",
    "url": "https://www.vantilburgkozijnen.nl",
    "contactPoint": contactInfo.map(info => ({
      "@type": "ContactPoint",
      "contactType": info.type === "phone" ? "customer service" : info.type,
      "telephone": info.type === "phone" ? info.details[0].replace(/[^0-9+]/g, '') : undefined,
      "email": info.type === "email" ? info.details[0] : undefined,
      "areaServed": "NL",
      "availableLanguage": "Dutch"
    })).filter(cp => cp.telephone || cp.email)
  })} />
</section>

<script>
  import { initEmailJS, sendEmail } from '../lib/emailjs';

  // Initialize EmailJS
  initEmailJS();

  // Form validation and submission
  const form = document.getElementById('contactForm') as HTMLFormElement;
  const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;
  const formStatus = document.getElementById('formStatus');
  const defaultText = submitButton?.querySelector('.default-text');
  const loadingText = submitButton?.querySelector('.loading-text');

  // Show loading state
  function setLoading(isLoading: boolean) {
    if (isLoading) {
      submitButton.disabled = true;
      defaultText?.classList.add('hidden');
      loadingText?.classList.remove('hidden');
    } else {
      submitButton.disabled = false;
      defaultText?.classList.remove('hidden');
      loadingText?.classList.add('hidden');
    }
  }

  // Show form status
  function showStatus(type: 'success' | 'error') {
    const statusElement = formStatus;
    const successMessage = statusElement?.querySelector('.success');
    const errorMessage = statusElement?.querySelector('.error');

    statusElement?.classList.remove('hidden');
    if (type === 'success') {
      successMessage?.classList.remove('hidden');
      errorMessage?.classList.add('hidden');
    } else {
      successMessage?.classList.add('hidden');
      errorMessage?.classList.remove('hidden');
    }
  }

  // Form submission handler
  async function handleSubmit(event: Event) {
    event.preventDefault();
    
    // Basic form validation
    const formData = new FormData(form);
    const name = formData.get('name') as string;
    const email = formData.get('email') as string;
    const message = formData.get('message') as string;

    if (!name || !email || !message) {
      showStatus('error');
      return;
    }

    setLoading(true);

    try {
      await sendEmail('contact', {
        name,
        email,
        message,
        date: new Date().toLocaleDateString('nl-NL'),
      });

      form.reset();
      showStatus('success');
    } catch (error) {
      console.error('Error sending email:', error);
      showStatus('error');
    } finally {
      setLoading(false);
    }
  }

  form?.addEventListener('submit', handleSubmit);
</script>

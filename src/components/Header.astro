---
interface Props {
  currentPath?: string;
}

const { currentPath = Astro.url.pathname } = Astro.props;

const menuItems = [
  { href: "/over-ons", text: "Over ons" },
  { href: "/projecten", text: "Projecten" },
  { href: "/voor-professionals", text: "Voor professionals" },
  { href: "/contact", text: "Contact" },
];
---

<header 
  class="fixed top-0 left-0 right-0 z-50 transition-all duration-300 backdrop-blur-sm" 
  id="header"
>
  <!-- Dark overlay for better text visibility -->
  <div class="absolute inset-0 bg-black/30 transition-opacity duration-300" id="header-overlay"></div>
  
  <nav class="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-6">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <a href="/" class="flex-shrink-0">
        <img 
          src="/images/logo.svg" 
          alt="Van Tilburg Kozijnen" 
          class="h-10 w-auto"
          id="main-logo"
        />
      </a>

      <!-- Navigation -->
      <div class="hidden lg:flex lg:items-center lg:space-x-12" id="nav-links">
        {menuItems.map((item) => (
          <a
            href={item.href}
            class="text-white hover:text-orange-400 transition-colors duration-300 text-sm font-medium"
          >
            {item.text}
          </a>
        ))}
        <a 
          href="/contact" 
          class="ml-8 inline-flex items-center justify-center px-6 py-2 border border-transparent rounded-full text-sm font-medium text-white bg-orange-500 hover:bg-orange-600 transition-colors duration-300"
        >
          Contact opnemen
        </a>
      </div>

      <!-- Mobile menu button -->
      <button 
        type="button"
        id="mobile-menu-button"
        class="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-white hover:text-orange-400 transition-colors duration-300"
        aria-controls="mobile-menu"
        aria-expanded="false"
      >
        <span class="sr-only">Open menu</span>
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>

    <!-- Mobile menu -->
    <div class="lg:hidden hidden" id="mobile-menu">
      <div class="fixed inset-0 bg-gray-900/95 z-50">
        <div class="fixed inset-y-0 right-0 max-w-full flex">
          <div class="w-full sm:max-w-sm bg-gray-900">
            <div class="h-20 flex items-center justify-between px-6">
              <img 
                src="/images/logo.svg" 
                alt="Van Tilburg Kozijnen" 
                class="h-8 w-auto"
              />
              <button 
                type="button"
                id="close-menu-button"
                class="inline-flex items-center justify-center p-2 rounded-md text-white hover:text-orange-400 transition-colors duration-300"
              >
                <span class="sr-only">Sluit menu</span>
                <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div class="px-6 pt-8 pb-12">
              <nav class="grid gap-y-10">
                {menuItems.map((item) => (
                  <a
                    href={item.href}
                    class="text-white text-base font-medium hover:text-orange-400 transition-colors duration-300"
                  >
                    {item.text}
                  </a>
                ))}
                <a 
                  href="/contact" 
                  class="inline-flex items-center justify-center px-6 py-3 border border-transparent rounded-full text-base font-medium text-white bg-orange-500 hover:bg-orange-600 transition-colors duration-300"
                >
                  Contact opnemen
                </a>
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  // Safely get elements with type checking
  const header = document.getElementById('header');
  const headerOverlay = document.getElementById('header-overlay');
  const navLinks = document.querySelectorAll('#nav-links a:not([class*="bg-orange"])');
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const closeMenuButton = document.getElementById('close-menu-button');

  // Add scroll event listener
  window.addEventListener('scroll', () => {
    if (!header || !headerOverlay) return;
    
    if (window.scrollY > 50) {
      header.classList.add('bg-white', 'shadow-lg');
      header.classList.remove('bg-transparent');
      headerOverlay.classList.add('opacity-0');
      navLinks.forEach(link => {
        if (link instanceof HTMLElement) {
          link.classList.remove('text-white');
          link.classList.add('text-gray-900');
        }
      });
    } else {
      header.classList.remove('bg-white', 'shadow-lg');
      header.classList.add('bg-transparent');
      headerOverlay.classList.remove('opacity-0');
      navLinks.forEach(link => {
        if (link instanceof HTMLElement) {
          link.classList.add('text-white');
          link.classList.remove('text-gray-900');
        }
      });
    }
  });

  // Mobile menu functionality
  function toggleMobileMenu() {
    if (!mobileMenu || !mobileMenuButton) return;
    
    const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
    mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
    mobileMenu.classList.toggle('hidden');
    document.body.style.overflow = isExpanded ? '' : 'hidden';
  }

  // Event listeners for mobile menu
  mobileMenuButton?.addEventListener('click', toggleMobileMenu);
  closeMenuButton?.addEventListener('click', toggleMobileMenu);

  // Close menu on click outside
  document.addEventListener('click', (e) => {
    if (!mobileMenu || !mobileMenuButton) return;
    
    const target = e.target as HTMLElement;
    if (!mobileMenu.classList.contains('hidden') && 
        !mobileMenuButton.contains(target) && 
        !mobileMenu.contains(target)) {
      toggleMobileMenu();
    }
  });

  // Close menu on escape key
  document.addEventListener('keydown', (e) => {
    if (!mobileMenu) return;
    
    if (e.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
      toggleMobileMenu();
    }
  });

  // Close menu on resize
  window.addEventListener('resize', () => {
    if (!mobileMenu) return;
    
    if (window.innerWidth >= 1024 && !mobileMenu.classList.contains('hidden')) {
      toggleMobileMenu();
    }
  });

  // Initial state check
  if (window.scrollY > 50 && header && headerOverlay) {
    header.classList.add('bg-white', 'shadow-lg');
    headerOverlay.classList.add('opacity-0');
    navLinks.forEach(link => {
      if (link instanceof HTMLElement) {
        link.classList.remove('text-white');
        link.classList.add('text-gray-900');
      }
    });
  }
</script>

<style>
  /* Smooth transitions */
  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
</style>

---
interface Props {
  currentPath?: string;
}

const { currentPath = Astro.url.pathname } = Astro.props;

const menuItems = [
  { href: "/#home", text: "Home" },
  { href: "/#services", text: "Diensten" },
  { href: "/#projects", text: "Projecten" },
  { href: "/#team", text: "Team" },
  { href: "/#garanties", text: "Garanties & Keurmerken" },
  { href: "/#contact", text: "Contact" }
];

import AppointmentModal from './AppointmentModal.astro';
---

<header class="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-sm shadow-sm transition-all duration-300">
  <div class="container mx-auto px-4">
    <nav class="flex items-center justify-between h-20">
      <!-- Logo -->
      <a href="/" class="flex items-center">
        <img src="/images/logo.svg" alt="R.VAN TILBURG KOZIJNEN" class="h-12 w-auto" />
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {menuItems.map((item) => (
          <a
            href={item.href}
            class={`nav-link text-sm font-medium hover:text-primary-600 transition-colors ${
              currentPath === item.href ? "text-primary-600" : "text-gray-600"
            }`}
          >
            {item.text}
          </a>
        ))}
        <button class="btn btn-primary" onclick="window.openAppointmentModal()">
          Afspraak maken
        </button>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobileMenuButton"
        class="md:hidden p-2 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-500"
        aria-label="Open menu"
      >
        <svg class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </nav>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobileMenu"
    class="fixed inset-0 bg-gray-800 bg-opacity-50 z-50 hidden"
    aria-hidden="true"
  >
    <div class="absolute inset-y-0 right-0 max-w-xs w-full bg-white shadow-xl">
      <div class="flex items-center justify-between p-4 border-b">
        <h2 class="text-lg font-semibold text-gray-900">Menu</h2>
        <button
          id="closeMobileMenu"
          class="p-2 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-500"
          aria-label="Close menu"
        >
          <svg class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <nav class="px-4 py-6 space-y-4">
        {menuItems.map((item) => (
          <a
            href={item.href}
            class={`block py-2 text-base font-medium hover:text-primary-600 transition-colors ${
              currentPath === item.href ? "text-primary-600" : "text-gray-600"
            }`}
          >
            {item.text}
          </a>
        ))}
        <button 
          onclick="window.openAppointmentModal()"
          class="w-full px-4 py-2 text-sm font-semibold text-white bg-primary-600 rounded-lg hover:bg-primary-700 transition-colors"
        >
          Afspraak maken
        </button>
      </nav>
    </div>
  </div>
</header>

<AppointmentModal />

<style>
  .nav-link {
    position: relative;
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: currentColor;
    transform: scaleX(0);
    transition: transform 0.2s ease-in-out;
  }

  .nav-link:hover::after,
  .nav-link.active::after {
    transform: scaleX(1);
  }
</style>

<script>
  const header = document.querySelector('header');
  const mobileMenuButton = document.getElementById('mobileMenuButton');
  const closeMobileMenu = document.getElementById('closeMobileMenu');
  const mobileMenu = document.getElementById('mobileMenu');

  // Mobile menu handling
  function toggleMobileMenu() {
    const isOpen = mobileMenu.classList.contains('block');
    mobileMenu.classList.toggle('hidden');
    mobileMenu.classList.toggle('block');
    document.body.style.overflow = isOpen ? '' : 'hidden';
  }

  mobileMenuButton.addEventListener('click', toggleMobileMenu);
  closeMobileMenu.addEventListener('click', toggleMobileMenu);

  // Close mobile menu when clicking outside
  mobileMenu.addEventListener('click', (e) => {
    if (e.target === mobileMenu) {
      toggleMobileMenu();
    }
  });

  // Close mobile menu when pressing escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
      toggleMobileMenu();
    }
  });
</script>

<style>
  /* Removed header-hidden style since we want the header to always be visible */
</style>

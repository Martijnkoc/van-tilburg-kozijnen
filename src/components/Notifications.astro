---
interface Props {
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
}

const { position = 'top-right' } = Astro.props;

const positionClasses = {
  'top-right': 'top-4 right-4',
  'top-left': 'top-4 left-4',
  'bottom-right': 'bottom-4 right-4',
  'bottom-left': 'bottom-4 left-4'
} as const;
---

<div id="notification-container" class={`fixed ${positionClasses[position]} z-50`}>
  <!-- Notifications will be injected here -->
</div>

<script>
  type NotificationType = 'success' | 'error' | 'info' | 'warning';

  interface NotificationAction {
    text: string;
    onClick: () => void;
  }

  interface CustomNotificationOptions {
    type: NotificationType;
    duration: number;
    action?: NotificationAction;
  }

  declare global {
    interface Window {
      notifications: {
        show: (message: string, options: CustomNotificationOptions) => void;
      };
    }
  }

  class NotificationManager {
    private container: HTMLElement | null = null;
    private readonly colors: Record<NotificationType, string>;
    private readonly icons: Record<NotificationType, string>;

    constructor() {
      this.colors = {
        success: 'bg-green-500',
        error: 'bg-red-500',
        info: 'bg-blue-500',
        warning: 'bg-yellow-500'
      };

      this.icons = {
        success: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>`,
        error: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>`,
        info: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>`,
        warning: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
        </svg>`
      };
    }

    private createContainer(): void {
      if (!this.container) {
        this.container = document.getElementById('notification-container');
      }
    }

    private createNotification(message: string, options: CustomNotificationOptions): void {
      this.createContainer();

      const notification = document.createElement('div');
      const type = options.type || 'info';
      const duration = options.duration || 5000;
      const action = options.action;

      notification.className = `flex items-center gap-3 p-4 text-white rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 ${this.colors[type as NotificationType]}`;
      notification.innerHTML = `
        ${this.icons[type as NotificationType]}
        <div class="flex-1">
          <p class="text-sm font-medium">${message}</p>
        </div>
        ${action ? `
          <button class="text-sm font-medium underline focus:outline-none">
            ${action.text}
          </button>
        ` : ''}
        <button class="text-white focus:outline-none" aria-label="Close notification">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      `;

      if (action) {
        const actionButton = notification.querySelector('button.underline');
        if (actionButton) {
          actionButton.addEventListener('click', action.onClick);
        }
      }

      const closeButton = notification.querySelector('button[aria-label="Close notification"]');
      if (closeButton) {
        closeButton.addEventListener('click', () => {
          notification.classList.add('translate-x-full');
          setTimeout(() => notification.remove(), 300);
        });
      }

      this.container?.appendChild(notification);
      requestAnimationFrame(() => notification.classList.remove('translate-x-full'));

      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => notification.remove(), 300);
      }, duration);
    }

    public show(message: string, options: CustomNotificationOptions): void {
      this.createNotification(message, options);
    }
  }

  // Initialize and expose to window
  window.notifications = {
    show: (message: string, options: CustomNotificationOptions) => {
      const notificationManager = new NotificationManager();
      notificationManager.show(message, options);
    }
  };
</script>

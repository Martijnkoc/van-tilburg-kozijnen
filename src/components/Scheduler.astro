---
const businessHours = {
  monday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
  tuesday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
  wednesday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
  thursday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
  friday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
  saturday: { start: "09:00", end: "13:00" }
};
---

<!-- Floating Button -->
<div class="fixed bottom-6 left-6 z-40 group">
  <div class="absolute left-full ml-3 top-1/2 -translate-y-1/2 bg-white text-gray-800 px-4 py-2 rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap before:content-[''] before:absolute before:-left-2 before:top-1/2 before:-translate-y-1/2 before:border-8 before:border-transparent before:border-r-white">
    <span class="block font-medium">Plan direct een afspraak in</span>
    <span class="block text-xs mt-1">Kies een datum en tijd die jou uitkomt</span>
  </div>
  <button
    data-modal="scheduler"
    class="flex items-center gap-3 bg-primary-600 hover:bg-primary-700 text-white px-4 py-3 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
    </svg>
    <span class="hidden md:inline text-sm font-medium">Plan afspraak</span>
  </button>
</div>

<!-- Modal -->
<div id="schedulerModal" class="fixed inset-0 z-50 hidden">
  <div class="absolute inset-0 bg-black/50 backdrop-blur-sm"></div>
  <div class="absolute inset-0 flex items-center justify-center p-4" onclick="event.stopPropagation()">
    <div class="bg-white rounded-xl shadow-2xl w-full max-w-2xl">
      <!-- Modal Header -->
      <div class="p-6 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <h3 class="text-2xl font-bold text-gray-900 font-montreal">Plan een afspraak</h3>
          <button data-close-modal class="text-gray-400 hover:text-gray-500 transition-colors">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Modal Body -->
      <div class="p-6">
        <div class="space-y-6">
          <!-- Date Picker -->
          <div class="relative">
            <label for="appointmentDate" class="block text-sm font-medium text-gray-700 mb-1">Selecteer een datum *</label>
            <input 
              type="date" 
              id="appointmentDate" 
              name="appointmentDate"
              class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
              required
            >
          </div>

          <!-- Time Slots -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Selecteer een tijdslot *</label>
            <div id="timeSlots" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
              <!-- Time slots will be dynamically populated -->
            </div>
          </div>

          <!-- Contact Information -->
          <div class="space-y-4">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700">Naam *</label>
              <input 
                type="text" 
                id="name" 
                name="name"
                autocomplete="name"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm"
                placeholder="Uw volledige naam"
                required
                minlength="2"
                value=""
              >
            </div>
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700">E-mailadres *</label>
              <input 
                type="email" 
                id="email" 
                name="email"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm"
                placeholder="uw@email.nl"
                required
                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
              >
            </div>
            <div>
              <label for="phone" class="block text-sm font-medium text-gray-700">Telefoonnummer *</label>
              <input 
                type="tel" 
                id="phone" 
                name="phone"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm"
                placeholder="06 12345678"
                required
                pattern="^[0-9\s\-\+\(\)]{10,}"
              >
            </div>
            <div>
              <label for="notes" class="block text-sm font-medium text-gray-700">Opmerkingen (optioneel)</label>
              <textarea 
                id="notes" 
                name="notes"
                rows="3" 
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm"
                placeholder="Optionele opmerkingen of vragen"
              ></textarea>
            </div>
          </div>
        </div>
      </div>

      <!-- Modal Footer -->
      <div class="p-6 border-t border-gray-200">
        <div class="flex justify-end space-x-3">
          <button 
            data-close-modal
            type="button"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
          >
            Annuleren
          </button>
          <button 
            id="confirmAppointment"
            type="button"
            class="px-4 py-2 text-sm font-medium text-white bg-primary-600 border border-transparent rounded-md shadow-sm hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
          >
            Bevestigen & toevoegen aan Outlook
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Modal functionality
    const modal = document.getElementById('schedulerModal');
    const openButtons = document.querySelectorAll('[data-modal="scheduler"]');
    const closeButtons = document.querySelectorAll('[data-close-modal]');
    const confirmButton = document.getElementById('confirmAppointment');
    let selectedTime = null;

    function openModal() {
      modal.classList.remove('hidden');
    }

    function closeModal() {
      modal.classList.add('hidden');
    }

    openButtons.forEach(button => {
      button.addEventListener('click', openModal);
    });

    closeButtons.forEach(button => {
      button.addEventListener('click', closeModal);
    });

    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    const businessHours = {
      monday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
      tuesday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
      wednesday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
      thursday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
      friday: { start: "09:00", end: "17:00", lunch: { start: "12:00", end: "13:00" } },
      saturday: { start: "09:00", end: "13:00" }
    };

    function generateTimeSlots(date) {
      if (!date) return [];
      
      const dateObj = new Date(date);
      const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
      const dayIndex = dayNames[dateObj.getDay()];
      
      console.log('Generating slots for:', dayIndex);
      
      const hours = businessHours[dayIndex];
      if (!hours) return [];

      const slots = [];
      const [startHour, startMinute] = hours.start.split(':').map(Number);
      const [endHour, endMinute] = hours.end.split(':').map(Number);
      
      let currentTime = new Date(date);
      currentTime.setHours(startHour, startMinute, 0);
      
      const endTime = new Date(date);
      endTime.setHours(endHour, endMinute, 0);

      while (currentTime < endTime) {
        // Skip lunch break
        if (hours.lunch) {
          const [lunchStartHour, lunchStartMinute] = hours.lunch.start.split(':').map(Number);
          const [lunchEndHour, lunchEndMinute] = hours.lunch.end.split(':').map(Number);
          
          const lunchStart = new Date(date);
          lunchStart.setHours(lunchStartHour, lunchStartMinute, 0);
          
          const lunchEnd = new Date(date);
          lunchEnd.setHours(lunchEndHour, lunchEndMinute, 0);

          if (currentTime >= lunchStart && currentTime < lunchEnd) {
            currentTime = new Date(lunchEnd);
            continue;
          }
        }

        slots.push(currentTime.toLocaleTimeString('nl-NL', {
          hour: '2-digit',
          minute: '2-digit',
          hour12: false
        }));

        currentTime.setMinutes(currentTime.getMinutes() + 30);
      }

      return slots;
    }

    function updateTimeSlots() {
      const datePicker = document.getElementById('appointmentDate');
      const timeSlotsContainer = document.getElementById('timeSlots');
      
      if (!datePicker || !timeSlotsContainer) return;
      
      const selectedDate = datePicker.value;
      const slots = generateTimeSlots(selectedDate);
      
      if (slots.length === 0) {
        timeSlotsContainer.innerHTML = '<p class="col-span-full text-center text-gray-500">Geen tijdslots beschikbaar op deze datum</p>';
        return;
      }
      
      timeSlotsContainer.innerHTML = slots.map(time => `
        <button
          type="button"
          class="time-slot w-full px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all duration-200"
          data-time="${time}"
        >
          ${time}
        </button>
      `).join('');

      // Add click event listeners to time slots
      timeSlotsContainer.querySelectorAll('.time-slot').forEach(button => {
        button.addEventListener('click', function() {
          selectedTime = this.dataset.time;
          
          timeSlotsContainer.querySelectorAll('.time-slot').forEach(b => {
            b.classList.remove('bg-primary-600', 'text-white', 'hover:bg-primary-700');
            b.classList.add('bg-white', 'text-gray-700', 'hover:bg-gray-50');
          });
          
          this.classList.remove('bg-white', 'text-gray-700', 'hover:bg-gray-50');
          this.classList.add('bg-primary-600', 'text-white', 'hover:bg-primary-700');
        });
      });
    }

    // Initialize date picker and time slots
    const datePicker = document.getElementById('appointmentDate');
    if (datePicker) {
      const today = new Date();
      const todayStr = today.toISOString().split('T')[0];
      
      const maxDate = new Date();
      maxDate.setMonth(maxDate.getMonth() + 3);
      const maxDateStr = maxDate.toISOString().split('T')[0];
      
      datePicker.min = todayStr;
      datePicker.max = maxDateStr;
      datePicker.value = todayStr;
      
      // Force an immediate update of time slots
      setTimeout(() => {
        console.log('Initial update of time slots');
        updateTimeSlots();
      }, 0);
      
      // Add change event listener
      datePicker.addEventListener('change', (e) => {
        console.log('Date changed:', e.target.value);
        updateTimeSlots();
      });
    }

    // Handle form submission
    if (confirmButton) {
      confirmButton.addEventListener('click', async () => {
        // Get form elements
        const form = document.createElement('form');
        const nameInput = document.getElementById('name');
        const emailInput = document.getElementById('email');
        const phoneInput = document.getElementById('phone');
        const notesInput = document.getElementById('notes');
        const dateInput = document.getElementById('appointmentDate');
        const timeSlotsContainer = document.getElementById('timeSlots');

        // Add inputs to form for validation
        if (nameInput) form.appendChild(nameInput.cloneNode(true));
        if (emailInput) form.appendChild(emailInput.cloneNode(true));
        if (phoneInput) form.appendChild(phoneInput.cloneNode(true));
        if (dateInput) form.appendChild(dateInput.cloneNode(true));

        // Check form validity
        const isValid = form.checkValidity();
        console.log('Form validity:', isValid);

        // Get values with fallbacks
        const name = nameInput?.value?.trim() ?? '';
        const email = emailInput?.value?.trim() ?? '';
        const phone = phoneInput?.value?.trim() ?? '';
        const date = dateInput?.value ?? '';
        const notes = notesInput?.value?.trim() ?? '';

        console.log('Form values:', { name, email, phone, date });

        // Validate all fields
        const errors = [];
        
        if (!name) {
          errors.push('Vul alstublieft uw naam in');
          nameInput?.focus();
        }
        if (!email) {
          errors.push('Vul alstublieft uw e-mailadres in');
          !errors.length && emailInput?.focus();
        }
        if (!phone) {
          errors.push('Vul alstublieft uw telefoonnummer in');
          !errors.length && phoneInput?.focus();
        }
        if (!date) {
          errors.push('Selecteer alstublieft een datum');
          !errors.length && dateInput?.focus();
        }

        // Time slot validation
        const selectedTimeSlot = timeSlotsContainer?.querySelector('.time-slot.bg-primary-600');
        if (!selectedTimeSlot) {
          errors.push('Selecteer alstublieft een tijdslot');
        }

        if (errors.length > 0) {
          alert(errors[0]);
          return;
        }

        // Prepare form data
        const formData = {
          name,
          email,
          phone,
          message: notes,
          preferredDate: date,
          preferredTime: selectedTimeSlot.dataset.time,
          projectType: 'Afspraak'
        };

        try {
          const response = await fetch('/api/create-appointment', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          });

          if (response.ok) {
            alert('Uw afspraak is succesvol ingepland! U ontvangt spoedig een bevestiging per e-mail.');
            closeModal();
            
            // Clear form
            if (nameInput) nameInput.value = '';
            if (emailInput) emailInput.value = '';
            if (phoneInput) phoneInput.value = '';
            if (notesInput) notesInput.value = '';
            if (dateInput) dateInput.value = '';
            
            timeSlotsContainer?.querySelectorAll('.time-slot').forEach(slot => {
              slot.classList.remove('bg-primary-600', 'text-white', 'hover:bg-primary-700');
              slot.classList.add('bg-white', 'text-gray-700', 'hover:bg-gray-50');
            });
          } else {
            const errorData = await response.json().catch(() => null);
            alert(errorData?.message || 'Er is iets misgegaan bij het inplannen van uw afspraak. Probeer het later opnieuw.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Er is iets misgegaan bij het inplannen van uw afspraak. Probeer het later opnieuw.');
        }
      });
    }
  });
</script>

---
const steps = [
  {
    number: "01",
    title: "Strategisch adviesgesprek",
    description: "Onze experts analyseren uw project en adviseren over de beste oplossingen voor uw specifieke situatie.",
    icon: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
  },
  {
    number: "02",
    title: "Technische inmeting",
    description: "Ons technisch team voert een gedetailleerde inmeting uit en brengt alle technische specificaties in kaart.",
    icon: "M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
  },
  {
    number: "03",
    title: "Project offerte",
    description: "U ontvangt een gedetailleerde offerte met transparante prijsopbouw, planning en projectspecificaties.",
    icon: "M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"
  },
  {
    number: "04",
    title: "Productie & Kwaliteitscontrole",
    description: "Uw kozijnen worden geproduceerd volgens ISO-normen met uitgebreide kwaliteitscontroles in elke fase.",
    icon: "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608"
  }
];
---

<div class="process-timeline relative">
  <!-- Steps -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 sm:gap-8">
    {steps.map((step, index) => (
      <div 
        class="process-step relative h-[280px]"
        data-step={index + 1}
      >
        <div class="card-3d-wrapper h-full">
          <div class="card-front bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20 h-full transform transition-all duration-500 hover:scale-105 flex flex-col">
            <!-- Step Number & Icon -->
            <div class="flex items-center justify-center mb-4 relative">
              <div class="relative w-20 h-20">
                <!-- Animated Border -->
                <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-primary-400/40 to-primary-600/40"></div>
                <!-- Icon Container -->
                <div class="absolute inset-[2px] rounded-xl bg-white/10 flex items-center justify-center backdrop-blur-sm overflow-hidden group">
                  {step.number === "01" && (
                    <svg class="w-12 h-12 text-primary-500 animated-icon" viewBox="0 0 24 24" fill="none">
                      <path class="document-line" d="M9 12h6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                      <path class="document-line delay-1" d="M9 16h6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                      <path class="document-outline" d="M7 21a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2H7z" stroke="currentColor" stroke-width="2"/>
                    </svg>
                  )}
                  {step.number === "02" && (
                    <svg class="w-12 h-12 text-primary-500 animated-icon" viewBox="0 0 24 24" fill="none">
                      <path class="measure-line" d="M4 21h16" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                      <path class="measure-tick" d="M6 21v-2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                      <path class="measure-tick delay-1" d="M10 21v-4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                      <path class="measure-tick delay-2" d="M14 21v-2" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                      <path class="measure-tick delay-3" d="M18 21v-4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                  )}
                  {step.number === "03" && (
                    <svg class="w-12 h-12 text-primary-500 animated-icon" viewBox="0 0 24 24" fill="none">
                      <path class="paper-outline" d="M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" stroke="currentColor" stroke-width="2"/>
                      <path class="checkmark delay-1" d="M9 11l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  )}
                  {step.number === "04" && (
                    <svg class="w-12 h-12 text-primary-500 animated-icon" viewBox="0 0 24 24" fill="none">
                      <path class="gear-outline" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37c.996.608" stroke="currentColor" stroke-width="2"/>
                      <circle class="gear-center" cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
                    </svg>
                  )}
                </div>
              </div>
              <div class="absolute -top-3 -right-3 w-8 h-8 rounded-full bg-primary-500 flex items-center justify-center text-white font-bold shadow-lg">
                {step.number}
              </div>
            </div>

            <!-- Content -->
            <div class="text-center relative z-10 flex-grow flex flex-col justify-center">
              <h4 class="text-lg font-bold text-text-dark mb-1.5 font-montreal">{step.title}</h4>
              <p class="text-[0.9rem] leading-snug text-text-light font-commons">{step.description}</p>
            </div>

            <!-- Decorative Elements -->
            <div class="absolute inset-0 rounded-2xl transition-all duration-500">
              <div class="absolute top-0 left-1/2 w-px h-0 group-hover:h-full bg-gradient-to-b from-transparent via-primary-500/20 to-transparent transition-all duration-500"></div>
              <div class="absolute left-0 top-1/2 h-px w-0 group-hover:w-full bg-gradient-to-r from-transparent via-primary-500/20 to-transparent transition-all duration-500"></div>
            </div>
          </div>
        </div>

        <!-- Connection Line -->
        {index !== steps.length - 1 && (
          <div class="hidden lg:block absolute -right-4 top-1/2 -translate-y-1/2 z-10">
            <div class="relative w-8">
              <svg width="32" height="24" viewBox="0 0 32 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="arrow-icon">
                <path d="M2 12H30M30 12L20 4M30 12L20 20" stroke="rgb(249, 115, 22)" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </div>
        )}
      </div>
    ))}
  </div>
</div>

<style>
  .process-timeline {
    perspective: 2000px;
  }

  .card-3d-wrapper {
    transform-style: preserve-3d;
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .process-step:hover .card-3d-wrapper {
    transform: rotateY(10deg) rotateX(5deg) translateZ(20px);
  }

  .card-front {
    backface-visibility: hidden;
    transform-style: preserve-3d;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
                0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .arrow-icon {
    opacity: 0;
    transform: translateX(-10px);
  }

  .animate-once .arrow-icon {
    animation: arrow-animate 1s forwards;
  }

  @keyframes arrow-animate {
    to { 
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Icon Animations */
  .animated-icon {
    transition: transform 0.3s ease;
  }

  .process-step:hover .animated-icon {
    transform: scale(1.1);
  }

  /* Document Icon Animation */
  .document-line {
    stroke-dasharray: 6;
    stroke-dashoffset: 6;
  }

  .document-line.delay-1 {
    transition-delay: 0.1s;
  }

  .animate-once .document-line {
    animation: draw-line 0.5s forwards;
  }

  @keyframes draw-line {
    to {
      stroke-dashoffset: 0;
    }
  }

  /* Measure Icon Animation */
  .measure-tick {
    transform-origin: bottom;
    opacity: 0;
  }

  .measure-tick.delay-1 { animation-delay: 0.1s; }
  .measure-tick.delay-2 { animation-delay: 0.2s; }
  .measure-tick.delay-3 { animation-delay: 0.3s; }

  .animate-once .measure-tick {
    animation: tick-appear 0.3s ease forwards;
  }

  @keyframes tick-appear {
    to {
      opacity: 1;
    }
  }

  /* Gear Animation */
  .gear-outline {
    transform-origin: center;
  }

  .process-step:hover .gear-outline {
    animation: rotate 4s linear infinite;
  }

  .gear-center {
    transform-origin: center;
  }

  .process-step:hover .gear-center {
    animation: rotate-reverse 4s linear infinite;
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes rotate-reverse {
    from {
      transform: rotate(360deg);
    }
    to {
      transform: rotate(0deg);
    }
  }
</style>

<script>
  function initializeAnimations() {
    const steps = document.querySelectorAll('.process-step');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Add a class to trigger the one-time animation
          entry.target.classList.add('animate-once');
          // Stop observing after the animation is triggered
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.5
    });

    steps.forEach(step => observer.observe(step));
  }

  // Initialize on page load
  window.addEventListener('load', initializeAnimations);
</script>
